/*  Programa: trabalho da disciplina Sistemas Distribuídos, prof Elias Duarte
    Autor: Fernando Zanutto GRR20182625
    Data da última modificação: 10/11/2021
*/
#include <stdio.h>
#include <stdlib.h>
#include "smpl.h"
#include <math.h>
#include "cisj.h"

//defini-se eventos
#define test 1
#define fault 2
#define repair 3

//lista********************
typedef struct reg
{
    int num;
    struct reg *prox;
} ListaTeste;

ListaTeste *criaLista()
{
    ListaTeste *nova;
    nova = malloc(sizeof(ListaTeste));
    nova->prox = NULL;
    nova->num = -1;
    return nova;
}

void insereLista(ListaTeste *lista, int num)
{
    ListaTeste *aux = lista;
    while (aux->prox != NULL)
        aux = aux->prox;
    ListaTeste *nova = malloc(sizeof(ListaTeste));
    nova->prox = NULL;
    nova->num = num;
    aux->prox = nova;
}

void imprimeLista(ListaTeste *lista)
{
    for (ListaTeste *aux = lista->prox; aux != NULL; aux = aux->prox)
        printf("%d ", aux->num);
    printf("\n");
}
//***********************************

//define-se descritor do nodo smpl
typedef struct sisdis
{
    int id; //idenficador da facility smpl
    int *State;
    ListaTeste *lista;
    //facility é um recurso simulado do smpl
    //outras variaveis do processo sao declaradas aqui
} tnodo;

tnodo *nodo;

void resetaLista(int N)
{
    for (int i = 0; i < N; i++)
    {
        ListaTeste *aux = nodo[i].lista->prox;
        while (aux != NULL)
        {
            ListaTeste *proximo = aux->prox;
            free(aux);
            aux = proximo;
        }
        nodo[i].lista->prox = NULL;
    }
}

void criaListasTestes(int N, int numClusters)
{
    node_set *nodes;

    resetaLista(N);
    for (int i = 0; i < N; i++)
    {
        for (int j = 1; j < numClusters + 1; j++)
        {
            nodes = cis(i, j);
            for (int k = 0; k < nodes->size; k++)
            {
                if (nodes->nodes[k] > N-1) continue;//se o processo não existe
                if (status(nodo[nodes->nodes[k]].id) == 0)
                {
                    insereLista(nodo[nodes->nodes[k]].lista, i);
                    break;
                }
            }
        }
    }
}

int main(int argc, char *argv[])
{

    static int N, //numero total de processos
        token,    //processo que está executando num instante de tempo
        event,    //evento
        r, i;
    static char fa_name[5]; //nome da facility

    if (argc != 2)
    {
        puts("uso incorreto");
        exit(1);
    }

    N = atoi(argv[1]);
    smpl(0, "Um exemplo de simulação");
    reset();
    stream(1);

    //inicialização de variaveis
    nodo = (tnodo *)malloc(sizeof(tnodo) * N);
    for (i = 0; i < N; i++)
    {
        nodo[i].State = malloc(sizeof(int) * N);
        nodo[i].lista = criaLista();
        for (int j = 0; j < N; j++)
            nodo[i].State[j] = -1;
        nodo[i].State[i] = 0;
    }
    for (i = 0; i < N; i++)
    {
        memset(fa_name, '\0', 5);
        sprintf(fa_name, "%d", i);
        nodo[i].id = facility(fa_name, 1);
    }

    int numClusters = ceil(log2(N)); //quantidade de clusters que preciso

    // for(i=0; i<N; i++){
    //     printf("processo %d é testado por:\n", i);
    //     for(int j=1; j<numClusters+1; j++){
    //         node_set *nodes = cis(i, j);
    //         for (int k=0; k < nodes->size; k++){
    //             printf("%i ", nodes->nodes[k]);
    //         }
    //         printf("\n");
    //     }
    //     printf("\n");

    // }

    for(i=0; i<N; i++){
        schedule(test, 30.0+i, i);//estamos escalonando testes para todos os nodos executarem no tempo 30
    }

    // schedule(test, 31.0, 1);
    // schedule(test, 31.0, 2);
    // schedule(test, 31.0, 4);

    // schedule(test, 30.0, 3);
    // schedule(test, 30.0, 5);
    // schedule(test, 30.0, 6);

    // schedule(test, 29.0, 7);
    schedule(fault, 1, 0);//processo 0 falha no tempo 1
    // schedule(repair, 61.0, 1);//processo 1 recupera no tempo 61


    while(time() < 150){
        cause(&event, &token);
        switch(event){
            case test:
                if(status(nodo[token].id) != 0) break; //se o testador testar falho ele nao testa
                printf("O nodo %d vai testar no tempo %3.1f\n", token, time());
                criaListasTestes(N, numClusters);
                for(ListaTeste *aux=nodo[token].lista->prox; aux!=NULL; aux=aux->prox){
                    if(status(nodo[aux->num].id) == 0){
                        printf("Testou o processo %d correto\n", aux->num);
                        //atualizando o vetor state
                        if(nodo[token].State[aux->num] == -1)
                            nodo[token].State[aux->num] = 0;
                        else if(nodo[token].State[aux->num]%2 != 0)
                            nodo[token].State[aux->num]++; 
                        for(i=0; i<N; i++){
                            if(i == token || i == aux->num) continue;
                            if(nodo[token].State[i] < nodo[aux->num].State[i])
                                nodo[token].State[i] = nodo[aux->num].State[i];
                        } 
               
                    }
                    else{
                        printf("Testou o processo %d falho\n", aux->num);
                        //atualizando vetor state
                        if(nodo[token].State[aux->num] == -1)
                            nodo[token].State[aux->num] = 1; 
                        else if(nodo[token].State[aux->num]%2 != 1)
                            nodo[token].State[aux->num]++;
                    }
                }
                printf("vetor state: ");
                for(i=0; i<N; i++){
                    printf("%d ", nodo[token].State[i]);
                }
                printf("\n\n");
                schedule(test, 30.0, token);
                break;
            case fault:
                r = request(nodo[token].id, token, 0);
                if(r!=0){
                    puts("não foi possível falhar o nodo....");
                    break;
                }
                printf("O nodo %d falhou no tempo %3.1f\n", token, time());
                break;
            case repair:
                release(nodo[token].id, token);
                printf("O nodo %d recuperou no tempo %3.1f\n", token, time());
                schedule(test, 30.0, token);
                break;
        }
    }

    // for (i = 0; i < N; i++)
    //     imprimeLista(nodo[i].lista);

    exit(0);

}